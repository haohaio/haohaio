{"meta":{"title":"灏絯喔","subtitle":"一个人的小角落","description":"好记性不如烂笔头","author":"haohaio","url":"https://haohaio.github.io"},"pages":[{"title":"移动互联网？","date":"2017-03-18T11:56:20.000Z","updated":"2018-12-08T09:09:27.041Z","comments":false,"path":"app/index.html","permalink":"https://haohaio.github.io/app/index.html","excerpt":"","text":"憋闹了，还没App。网页写的差不多了，再考虑写移动互联网….public static void main(String args[]) throws Exception &#123; for (int i = 0; ; i++) &#123; Thread.sleep(1000); System.out.println(\"嗯、写码，呵呵...\" + i); &#125;&#125; fyiguhjnwkefnmwoeih68yuih4jnkrfewdfyugbijnk.wfww3f 5jhyrtgve5jhytbgvef5grefvqwu6ejynhbvwer5jr5hb4gevgwh54uh3g4weab eh43eg223t4whretbvfw345u36jhtbevww32q4wu5ejhtbevwgw354uhtbgevfcewg 擦了下键盘，这些你可以拿去当QQ密码，绝不会被盗号，不用谢！"},{"title":"为何建站 && 为何写作","date":"2017-02-07T05:23:07.000Z","updated":"2018-12-15T11:09:26.035Z","comments":false,"path":"about/index.html","permalink":"https://haohaio.github.io/about/index.html","excerpt":"","text":"为何建站在我年轻的时候，独立站长曾是一个牛逼闪闪的角色，然而现在不那么神秘了。搭建说IT这个网站主要是为了记录技术成长的点滴，当然装逼也是一个目的。 为何写写作 读的书越多，你会发现知道的东西越多，不知道的东西就更多了，不知道远远大于知道，于是你在两者间不断碰撞、焦虑、欢喜、忧伤，产生各种思想、情感和故事，记录下来，就是文章。 引自《MacTalk》跨越边界 显然，写作是个艺术活儿，这个博客是带有某种程序员感情的，如果你是这种艺术家，那就能共震了！ 本站主要作为技术笔记存档，内容主要涉及前端开发（含移动端），偶尔可能也会有一些碎碎念、开开车。如果某一篇帮助了你，请记得点个赞。 作为内容站，持续输出高质量的内容是件不太容易的事情，本站的任何文章，你可任意转载，但请保留原文链接。如有兴趣，欢迎一起码字。 关于作者斜杠中年、文字控、周杰伦迷，就职于粗粮厂的90后程序猿。目前致力于JavaScript大法，ReactNative是目前的工作。鸡汤一站，请自取一篇饮 如果您遇到麻烦或对本站有疑问，请在本站找到那个白色❓号并点击查看 没时间再解释了，赶紧上车…"},{"title":"QA - 帮助那个中心...","date":"2017-03-29T10:49:38.000Z","updated":"2018-12-08T09:09:27.042Z","comments":true,"path":"help/index.html","permalink":"https://haohaio.github.io/help/index.html","excerpt":"","text":"这里不发表情，准备说点严肃、实在的…Q: 这网站怎么弄的，还挺好看的啊？ A: 本站是静态博客，通过hexo生成，主题是我自己写的。免费使用，已开源至GitHub，本站底部有它们的链接 Q: 为什么博客有时候打开速度很慢，一直在加载呢？ A: 评论组件使用的Disqus等资源的服务器在墙外，你懂的…(不懂问搜狗)。不过不影响文章阅读。 Q: 我也想用这个主题搭个博客，不知道怎么弄？ A: 先去hexo官网看看，学会用这个写作并学会使用gitpages之类的部署博客。教程谷歌一下遍地皆是。主题是免费的，在本站底部可找到链接，根据文档自及配置就好了。遇到问题，在本页留言即可，我会很愿意帮助你的。需要注意的是主题有全站https开关，在主题_config.yml文件的fullHttps处配置。如配置不当r某些文件就无法正确引用，加载粗来的页面会很挫。 Q: 你这主题，我配置了怎么运行报错啊，跑不起来啊？ A: 关于使用主题出错，请先前往JSimple-issues寻找答案，说不定你遇到的问题，已经有人碰到而我也回答解决方式了。关于主题的任何问题，我都会在那里回复 Q: 无法自由翱翔互联网咋办？ A: 着急吃饭且自甘有钱的朋友请直接购买蓝灯。不着急就慢慢找吧，像GreenVPN、www.ishadowsocks.com都是很好的方案。另外有hosts方案，请前往这个项目UsefullShells Q: 如何找到一个靠谱的对象？ 如果你有资源，记得第一时间告诉我… Q: 我觉得站长你挺有意思的，能交个朋友吗？ A: 可以，来握个手吧：斜杠中年 暂时更新这些，需要什么本文底部留言……"},{"title":"嘉宾推荐","date":"2017-02-07T05:22:22.000Z","updated":"2018-12-08T09:09:27.162Z","comments":false,"path":"links/index.html","permalink":"https://haohaio.github.io/links/index.html","excerpt":"","text":"以下摘录有趣、有意义、有影响力、有正能量的博客、资源 此处不做网址导航，因此不接受以SEO为目的的友链。排序不分那啥… JS大法系 阮一峰博客闲情写手腾讯AlloyTeam 苹果派 王巍（喵神）的博客Objc.ioSwifter 娱乐圈 VIMCodeTank 公众号 没有链接，请直接关注微信公众号：涔汐(zhangcenxi99)、小道消息、MacTalk等等"},{"title":"标签云","date":"2017-02-04T07:37:12.000Z","updated":"2018-12-08T09:09:27.163Z","comments":true,"path":"tags/index.html","permalink":"https://haohaio.github.io/tags/index.html","excerpt":"","text":""},{"title":"时光轴","date":"2017-02-07T05:23:27.000Z","updated":"2018-12-08T09:09:27.163Z","comments":false,"path":"timeline/index.html","permalink":"https://haohaio.github.io/timeline/index.html","excerpt":"","text":"时光轴嘛，得先有时光，会更新的，别急……"}],"posts":[{"title":"Canvas学习笔记一：初识Canvas","slug":"初识Canvas","date":"2018-12-13T11:51:53.000Z","updated":"2018-12-15T11:08:55.741Z","comments":true,"path":"front-end/canvas-1-1544701913.html","link":"","permalink":"https://haohaio.github.io/front-end/canvas-1-1544701913.html","excerpt":"","text":"简介canvas 元素可以说是 HTML5 元素中功能最强大的一个。我们可以通过 canvas 元素来绘制图像，不过 canvas 本身并没有绘制能力，必须通过js脚本来完成实际的绘制任务。canvas的能力主要是通过 canvas 的 context 对象表现出来的，该对象提供了用于在画布上绘图的方法和属性。 可以先看一个简单的 demo Hello Canvas，来简单了解一下canvas。 context 对象的获取var canvas = getElementById('canvas');// '2d' 中的 'd' 必须小写var context = canvas.getContext('2d'); canvas 的 “后备内容” (fallback content) IE8 以及更早的版本不支持 canvas 元素。 当浏览器不支持 canvas 元素时，canvas 元素内部部分所含的文本就会显示出来，这种文本叫做“后备内容” (fallback content)。 &lt;canvas&gt; Canvas not supported&lt;/canvas&gt; 另外我们可以通过简单的 js 代码来检查浏览器对 canvas 的支持性： var canvas = document.getElementById('canvas');if (canvas.getContext) &#123; var ctx = canvas.getContext('2d'); // drawing code here&#125; else &#123; // canvas-unsupported code here&#125; canvas 的尺寸默认的canvas元素大小是 300 * 150 个像素。 我们可以通过指定 width 和 height 属性值来修改 canvas 元素的大小。 &lt;canvas id=\"canvas\" width=\"600\" height=\"300\"&gt; 在设置 canvas 的宽度和高度时，不能使用 px 后缀。虽说支持 canvas 的浏览器普遍都允许使用 px 后缀，但是这是不被 canvas 规范所接受的。根据规范，这些属性的取值，只能是非负整数。 canvas 元素的大小和绘图表面的大小我们还可以通过 CSS 属性来改变 canvas 元素的大小。 #canvas &#123; width: 600px; height: 300px;&#125; 不过通过 CSS 设置 canvas 元素的大小，与通过 width、height 属性值设定，效果并不一样。 其根本原因是因为 canvas 元素实际上有两套尺寸。一个是元素本身的大小，还有一个是元素绘图表面（drawing surface）的大小。 当设置元素的 width 和 height 属性时，实际上是同时修改了元素本身的大小和元素绘图表面的大小。然而，通过 CSS 来设定 canvas 元素的大小时，只会改变元素本身的大小，而不会影响到绘图表面。当 canvas 元素的大小不符合起绘图表面的大小时，浏览器就会对绘图表面进行缩放，使其符合元素的大小。具体效果如如下面两幅图所示： 通过设置元素的 width 和 height 属性修改 canvas 元素大小的效果 通过 CSS 来设定 canvas 元素的大小的效果 （浏览器自动缩放） 所以一般情况下我们都是通过 width 与 height 属性而非 CSS 来修改 canvas 元素的大小。 canvas 元素的 APIcanvas 元素只提供了2个属性与3个方法。 canvas元素的属性 属性 类型 默认值 width 非负整数 300 height 非负整数 150 canvas元素的方法 方法 描述 getContext() 返回与该 canvas 元素相关的绘图环境对象。 toDataURL(type, encoderOptions) 返回一个数据地址（data URL），可将其设定为 img 元素的 src 属性值。第一个参数指定了图像的类型，例如 image/jpeg 或 image/png，默认为 image/png。第二个参数在指定图片格式为 image/jpeg 或 image/webp的情况下, 可设定为 0 ~ 1.0 之间的 double 值，表示 JPEG 图像的显示质量，如果超出取值范围，将会使用默认值 0.92。 toBlob(callback, type, encoderOptions) 创建一个用于表示次canvas 元素图像文件的 Blob。第一个参数是一个回调函数，并传入一个 blob 对象作为参数，第二个参数为图像类型，最后一个参数为 JPEG 图像的显示质量","categories":[{"name":"前端","slug":"front-end","permalink":"https://haohaio.github.io/categories/front-end/"}],"tags":[{"name":"css","slug":"css","permalink":"https://haohaio.github.io/tags/css/"}]},{"title":"Web动画之animation","slug":"Web动画之animation","date":"2018-12-12T01:40:21.000Z","updated":"2018-12-15T10:41:49.209Z","comments":true,"path":"front-end/web-animation-animation-1544578821.html","link":"","permalink":"https://haohaio.github.io/front-end/web-animation-animation-1544578821.html","excerpt":"","text":"在 Web动画之transition 中我们可以了解到 transition 可以把一系列属性从一个状态变到另一个状态。CSS动画还提供了一种创建动画的方式，而且功能更加丰富。animation 能把一系列属性从一个状态变到另一个状态，再变到第三个状态，然后一直这么变下去。此外，还能重播动画，鼠标移到动画上时停止动画，甚至在动画结束时还能倒播动画。接下来我们就来了解一下 animation。 animation 比 transition 复杂一些，不过有个额外的好处：无需触发就能开始动画。 Animation 简介 与 transition 一样，IE9 及之前的版本也不支持 animation。 创建 animation 的过程主要分成以下两步： 定义动画即设置 keyframe (关键帧, 指展示画面的一帧)，列出要变化的CSS属性。基本结构如下： @keyframes animationName &#123; from &#123; /* 在这里列出CSS属性 */ &#125; to &#123; /* 在这里列出CSS属性 */ &#125;&#125; keyframes 不是CSS属性，而是@规则。此外，CSS还有几个@规则：在样式表中加载另外一个样式表的 @import 语句；为不同媒介类型定义样式的 @media。 首先在 @keyframes 后面定义一个名称，即动画的名称 (e.g. fadeIn、fadeOut)。 然后至少添加两个关键帧。在上面的示例中，关键字 from 用于创建起始关键帧，关键字 to 用于创建结束关键帧。在每个关键帧中可以添加一个或多个CSS属性，与定义样式一样。例如： fadeIn 不仅只能定义两个关键帧，还可以用百分比值定义多个关键帧。百分比表示在整个动画过程的什么位置发生变化。 例如：growAndGlow 百分比值的用法还有个特别的技巧：使用不同的百分比值定义相同的CSS属性。首先，当动画播放到摸一会时刻时暂停，然后再继续 (e.g. glow)。还可以用来不同时间段使用相同的CSS属性(e.g. glow) 可以把关键字 form 换成 0%，把关键字 to 换成 100%。 应用动画定义好动画后，若想播放动画，还需将动画应用到页面的元素上。 直接将动画加到动画的样式中，则动画在页面加载时就会播放(上面的例子都是如此)。 此外，可以把动画添加到某个伪类中 (e.g. :hover、:active、:target或:focus)，还可以把动画添加到类样式中，在需要的时候使用js动态应用那个类样式。 CSS提供了几个 animation 相关的属性，用于控制如何以及何时播放动画。 有些属性与 transition 基本相同，这里不做过多解释 animation-name 以CSS关键字做动画名称时，放在引号里能避免冲突 可以对应多个动画的名称，来让一个元素应用多个动画 animation-duration animation-timing-function 可以为每个关键帧设置不同的时序函数 animation-dealy animation-iteration-count (动画运行次数)(e.g. animation-iteration-count: 10;) 设为关键字 infinite 时，可无限次运行动画 animation-direction 当动画多次执行时，如有需要，可设为 alternate 关键字，动画会在奇数时正向播放，偶数时反向播放。 animation-fill-mode 可设为 forwords 关键字，当动画结束时让元素显示成动画结束后的样子。 animation属性的简写形式 名字和持续时间是必写的。 多个动画时，可用逗号分开。 暂停动画若有需要可使用伪类或js设置 animation-play-state (running|paused) 属性为 paused 来暂停动画。 推荐推荐一个CSS animation库 animate.css，这个库封装了很多动画，拿来即用，非常方便。","categories":[{"name":"前端","slug":"front-end","permalink":"https://haohaio.github.io/categories/front-end/"}],"tags":[{"name":"css","slug":"css","permalink":"https://haohaio.github.io/tags/css/"}]},{"title":"Web动画之transition","slug":"Web动画之transition","date":"2018-12-09T06:28:26.000Z","updated":"2018-12-15T10:21:38.005Z","comments":true,"path":"front-end/web-animation-transition-1544336906.html","link":"","permalink":"https://haohaio.github.io/front-end/web-animation-transition-1544336906.html","excerpt":"","text":"目前Web动画主要有两大实现途径： CSS3动画。这类动画是当前页面动画的主力军，主要通过 transition 和 animation 两种方式来实现。 transition (过渡) 一种简单的动画，在一定时间内从一组CSS\b属性变成另一组属性。 animation 是关键帧动画，可以预先为动画设置多个节点，在每个节点中含有不同的状态属性，通过使用 animation 我们可以得到更为复杂的动画效果。 JavaScript动画。这类动画是通过JavaScript来动态的控制并刷新元素的各个属性值，以形成动画效果。 除以上两者外，我们也可以使用SVG 或 canvas等来制作动画。 一般来说，大部分简单的动画都可以使用 transition 实现。JavaScript动画则往往用于更加复杂，或是需要结合各类用户交互操作的动画效果。在运行效率方面，像jQuery这种JavaScript类库的动画效果要低于CSS3动画。而在兼容性方面，CSS3动画的兼容性要差于jQuery等类库动画，前者并不支持IE9之前的浏览器。今天就先了解一下 transition 动画。 Transition简介一种简单的动画，在一定时间内从一组CSS\b属性变成另一组属性。 IE只有10和以后的版本才支持transition 为了实现过渡效果，要满足以下几个条件： 两个样式 (过渡前的样式和过渡\b后的样式) transition\b属性 (\b\b添加到初始样式中) 触发器 (指促使元素在两个在两个元素之间变化的操作。在CSS中可以使用伪类触发动画 (e.g. :hover、:active、:target或:focus)，还可以使用js触发 (增删类或者修改属性)) transition 的四个属性 transition-property (指定需要变化的属性，\b可用关键字all表示所有属性) transition-property: color, background-color;transition-property: all; transition-duration (动画持续时间) transition-duration: .5s;transition-duration: 500ms; transition-timing-function (过渡的时序，即持续过程的速率) linear (中间快，两头慢) ease (\b开始时慢，中间加速，\b末尾又降速)default ease-in \b(开始时慢，之后快) ease-out \b(开始时快，结束时候慢) ease-in-out (两头慢) 可通过演示具体比较一下\b\b各个速率的区别 演示地址 transition-delay (动画\b延时时间) transition属性的简写形式 要变化的属性和动画的持续时间是必写的。默认情况下，时序函数是ease，而且没有延迟。 多个要变化的属性时，可用逗号分开。 transition: all 1s;transition: background-color 1s, color .5s, border-color .5s 1s; 附上一个综合版的Demo transition demo 让动画更流畅以动画形式改变多个属性会增加Web浏览器的负担。一次有太多动画可能导致浏览器假死，甚至是崩溃。尤其是移动设备和平板电脑，因为这些设备的CPU比桌面电脑和笔记本电脑慢很多。 不过，有4种变化导致浏览器使用太多CPU：opacity，以及transform属性的translate、scale和rotate函数。这四个属性处理起来比其它CSS属性省事，所以它们的动画效果更流畅。 此外，还可以强制让电脑的GPU (Graphic Processing Unit, 图形处理器) 渲染动画。GPU的运算速度特别快，与电脑的CPU相比，执行特定类型的计算速度快得多。我们可以在样式中添加3D变形属性，以此“骗过”浏览器，让它使用GPU处理样式变化。但是因为GPU的处理能力有限，如果把太多视觉效果交给它处理，可能会拖慢浏览器，导致假死。","categories":[{"name":"前端","slug":"front-end","permalink":"https://haohaio.github.io/categories/front-end/"}],"tags":[{"name":"css","slug":"css","permalink":"https://haohaio.github.io/tags/css/"}]}]}